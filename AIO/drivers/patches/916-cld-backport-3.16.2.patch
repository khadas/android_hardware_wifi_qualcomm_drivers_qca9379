/*
* Copyright (c) 2014 Linux Foundation
* All Rights Reserved.
*
* Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/

diff -Naur qcacld-new.old/CORE/HDD/inc/wlan_hdd_cfg80211.h qcacld-new/CORE/HDD/inc/wlan_hdd_cfg80211.h
--- qcacld-new.old/CORE/HDD/inc/wlan_hdd_cfg80211.h	2014-10-22 10:16:48.083338189 +0800
+++ qcacld-new/CORE/HDD/inc/wlan_hdd_cfg80211.h	2014-10-22 10:50:07.891383819 +0800
@@ -28,6 +28,12 @@
 #if !defined( HDD_CFG80211_H__ )
 #define HDD_CFG80211_H__
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 
 /**===========================================================================
 
@@ -850,4 +856,7 @@
 struct cfg80211_bss* wlan_hdd_cfg80211_update_bss_list(
    hdd_adapter_t *pAdapter, tCsrRoamInfo *pRoamInfo);
 
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
+
 #endif
diff -Naur qcacld-new.old/CORE/HDD/inc/wlan_hdd_p2p.h qcacld-new/CORE/HDD/inc/wlan_hdd_p2p.h
--- qcacld-new.old/CORE/HDD/inc/wlan_hdd_p2p.h	2014-10-22 10:16:48.083338189 +0800
+++ qcacld-new/CORE/HDD/inc/wlan_hdd_p2p.h	2014-10-22 10:50:07.891383819 +0800
@@ -34,6 +34,13 @@
 \brief       Linux HDD P2P include file
 
 ==========================================================================*/
+
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 #define ACTION_FRAME_TX_TIMEOUT 2000
 #define WAIT_CANCEL_REM_CHAN    1000
 #define WAIT_REM_CHAN_READY     1000
@@ -184,4 +191,7 @@
 
 void wlan_hdd_cleanup_remain_on_channel_ctx(hdd_adapter_t *pAdapter);
 
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
+
 #endif // __P2P_H
diff -Naur qcacld-new.old/CORE/HDD/inc/wlan_hdd_tdls.h qcacld-new/CORE/HDD/inc/wlan_hdd_tdls.h
--- qcacld-new.old/CORE/HDD/inc/wlan_hdd_tdls.h	2014-10-22 10:16:48.083338189 +0800
+++ qcacld-new/CORE/HDD/inc/wlan_hdd_tdls.h	2014-10-22 10:50:07.891383819 +0800
@@ -34,6 +34,12 @@
 \brief       Linux HDD TDLS include file
 ==========================================================================*/
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 #define MAX_NUM_TDLS_PEER           3
 
 #define TDLS_SUB_DISCOVERY_PERIOD   100
@@ -326,4 +332,7 @@
 int wlan_hdd_tdls_set_force_peer(hdd_adapter_t *pAdapter, u8 *mac,
                                  tANI_BOOLEAN forcePeer);
 
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
+
 #endif // __HDD_TDSL_H
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_assoc.c qcacld-new/CORE/HDD/src/wlan_hdd_assoc.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_assoc.c	2014-10-22 10:16:48.083338189 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_assoc.c	2014-10-22 10:50:07.891383819 +0800
@@ -67,6 +67,11 @@
 #ifdef IPA_OFFLOAD
 #include <wlan_hdd_ipa.h>
 #endif
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 v_BOOL_t mibIsDot11DesiredBssTypeInfrastructure( hdd_adapter_t *pAdapter );
 
 struct ether_addr
@@ -1860,6 +1865,9 @@
 {
    hddLog(VOS_TRACE_LEVEL_INFO, "%s: %s: id %d, status %d, result %d",
           __func__, pAdapter->dev->name, roamId, roamStatus, roamResult);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+   struct ieee80211_channel *chan;
+#endif
 
    switch( roamResult )
    {
@@ -1910,8 +1918,13 @@
                       __func__, pAdapter->dev->name);
                return;
             }
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+	    chan = ieee80211_get_channel(pAdapter->wdev.wiphy,
+                                         (int)pRoamInfo->pBssDesc->channelId);
+	    cfg80211_ibss_joined(pAdapter->dev, bss->bssid, chan, GFP_KERNEL);
+#else
             cfg80211_ibss_joined(pAdapter->dev, bss->bssid, GFP_KERNEL);
+#endif
             cfg80211_put_bss(
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
                              pHddCtx->wiphy,
@@ -4741,4 +4754,6 @@
     }
 }
 
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
 #endif /* FEATURE_WLAN_ESE && FEATURE_WLAN_ESE_UPLOAD */
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_cfg80211.c qcacld-new/CORE/HDD/src/wlan_hdd_cfg80211.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_cfg80211.c	2014-10-22 10:16:48.079338189 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_cfg80211.c	2014-10-22 10:50:07.899383819 +0800
@@ -108,6 +108,11 @@
 #include "wlan_hdd_nan.h"
 #endif
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 #define g_mode_rates_size (12)
 #define a_mode_rates_size (8)
 #define FREQ_BASE_80211G          (2407)
@@ -3516,12 +3521,20 @@
 #ifndef CONFIG_ENABLE_LINUX_REG
     /* the flag for the other case would be initialzed in
        vos_init_wiphy_from_nv_bin */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+	wiphy->regulatory_flags |= REGULATORY_STRICT_REG;					
+#else            
     wiphy->flags |= WIPHY_FLAG_STRICT_REGULATORY;
+#endif       
 #endif
 
     /* This will disable updating of NL channels from passive to
      * active if a beacon is received on passive channel. */
-    wiphy->flags |=   WIPHY_FLAG_DISABLE_BEACON_HINTS;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+	wiphy->regulatory_flags|= REGULATORY_DISABLE_BEACON_HINTS;
+#else
+    wiphy->flags |= WIPHY_FLAG_DISABLE_BEACON_HINTS;
+#endif
 
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
@@ -3804,7 +3817,11 @@
           struct ieee80211_supported_band *band = wiphy->bands[IEEE80211_BAND_5GHZ];
           // Mark UNII -1 band channel as passive
           if (WLAN_HDD_CHANNEL_IN_UNII_1_BAND(band->channels[j].center_freq))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+              band->channels[j].flags |= IEEE80211_CHAN_NO_IR;
+#else   	  	
              band->channels[j].flags |= IEEE80211_CHAN_PASSIVE_SCAN;
+#endif			  	
        }
     }
 }
@@ -15087,3 +15104,5 @@
      .key_mgmt_set_pmk = wlan_hdd_cfg80211_key_mgmt_set_pmk,
 #endif
 };
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_hostapd.c qcacld-new/CORE/HDD/src/wlan_hdd_hostapd.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_hostapd.c	2014-10-22 10:16:48.079338189 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_hostapd.c	2014-10-22 10:50:07.899383819 +0800
@@ -98,6 +98,12 @@
 #include "vos_trace.h"
 #include "wlan_hdd_cfg.h"
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
+
 #define    IS_UP(_dev) \
     (((_dev)->flags & (IFF_RUNNING|IFF_UP)) == (IFF_RUNNING|IFF_UP))
 #define    IS_UP_AUTO(_ic) \
@@ -5055,3 +5061,5 @@
    EXIT();
    return 0;
 }
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_main.c qcacld-new/CORE/HDD/src/wlan_hdd_main.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_main.c	2014-10-22 10:16:48.075338188 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_main.c	2014-10-22 10:50:07.903383819 +0800
@@ -169,6 +169,11 @@
 #define MEMORY_DEBUG_STR ""
 #endif
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 /* the Android framework expects this param even though we don't use it */
 #define BUF_LEN 20
 static char fwpath_buffer[BUF_LEN];
@@ -13863,3 +13868,5 @@
 
 module_param(country_code, charp,
              S_IRUSR | S_IRGRP | S_IROTH);
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_p2p.c qcacld-new/CORE/HDD/src/wlan_hdd_p2p.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_p2p.c	2014-10-22 10:16:48.079338189 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_p2p.c	2014-10-22 10:50:07.903383819 +0800
@@ -54,6 +54,11 @@
 #include "vos_trace.h"
 #include "vos_sched.h"
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 //Ms to Micro Sec
 #define MS_TO_MUS(x)   ((x)*1000);
 
@@ -2446,3 +2451,5 @@
     netif_tx_start_all_queues( pAdapter->dev );
 
 }
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
diff -Naur qcacld-new.old/CORE/HDD/src/wlan_hdd_tdls.c qcacld-new/CORE/HDD/src/wlan_hdd_tdls.c
--- qcacld-new.old/CORE/HDD/src/wlan_hdd_tdls.c	2014-10-22 10:16:48.079338189 +0800
+++ qcacld-new/CORE/HDD/src/wlan_hdd_tdls.c	2014-10-22 10:50:07.903383819 +0800
@@ -45,6 +45,11 @@
 #include "wlan_hdd_cfg80211.h"
 #include "vos_sched.h"
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 #ifdef TDLS_USE_SEPARATE_DISCOVERY_TIMER
 static tANI_S32 wlan_hdd_get_tdls_discovery_peer_cnt(tdlsCtx_t *pHddTdlsCtx);
 #endif /* TDLS_USE_SEPARATE_DISCOVERY_TIMER */
@@ -2860,3 +2865,5 @@
                                reason,
                                GFP_KERNEL);
 }
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
diff -Naur qcacld-new.old/CORE/VOSS/src/vos_nvitem.c qcacld-new/CORE/VOSS/src/vos_nvitem.c
--- qcacld-new.old/CORE/VOSS/src/vos_nvitem.c	2014-10-22 10:16:48.123338190 +0800
+++ qcacld-new/CORE/VOSS/src/vos_nvitem.c	2014-10-22 10:50:07.907383820 +0800
@@ -55,6 +55,11 @@
 #include "regdomain.h"
 #include "regdomain_common.h"
 
+#ifdef LINUX_VERSION_CODE
+#undef LINUX_VERSION_CODE
+#endif
+#define LINUX_VERSION_CODE  KERNEL_VERSION(3, 13, 0)
+
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,9,0))
 #define IEEE80211_CHAN_NO_80MHZ		1<<7
 #endif
@@ -923,6 +928,12 @@
              * default during init, prior to calling our
              * regulatory_hint().
              */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+            if (!(reg_rule->flags &
+                     NL80211_RRF_NO_IR))
+            ch->flags &=
+                     ~IEEE80211_CHAN_NO_IR;
+#else
             if (!(reg_rule->flags &
                      NL80211_RRF_NO_IBSS))
                ch->flags &=
@@ -931,10 +942,15 @@
                      NL80211_RRF_PASSIVE_SCAN))
                ch->flags &=
                   ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif
          } else {
             if (ch->beacon_found)
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+               ch->flags &= ~IEEE80211_CHAN_NO_IR;
+#else				
                ch->flags &= ~(IEEE80211_CHAN_NO_IBSS |
                      IEEE80211_CHAN_PASSIVE_SCAN);
+#endif
          }
       }
    }
@@ -958,12 +974,21 @@
     * on these channels. This is only done for specific regulatory SKUs
     */
    if (initiator != NL80211_REGDOM_SET_BY_COUNTRY_IE) {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+      ch = &sband->channels[11]; /* CH 12 */
+      if (ch->flags & IEEE80211_CHAN_NO_IR)
+         ch->flags &= ~IEEE80211_CHAN_NO_IR;
+      ch = &sband->channels[12]; /* CH 13 */
+      if (ch->flags & IEEE80211_CHAN_NO_IR)
+         ch->flags &= ~IEEE80211_CHAN_NO_IR;
+#else       	
       ch = &sband->channels[11]; /* CH 12 */
       if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
          ch->flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
       ch = &sband->channels[12]; /* CH 13 */
       if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
          ch->flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif	  
       return;
    }
 
@@ -984,8 +1009,13 @@
 
    if (!IS_ERR(reg_rule)) {
       if (!(reg_rule->flags & NL80211_RRF_PASSIVE_SCAN))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+         if (ch->flags & IEEE80211_CHAN_NO_IR)
+            ch->flags &= ~IEEE80211_CHAN_NO_IR;
+#else   	  	
          if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
             ch->flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif		 
    }
 
    ch = &sband->channels[12]; /* CH 13 */
@@ -997,8 +1027,13 @@
 #endif
    if (!IS_ERR(reg_rule)) {
       if (!(reg_rule->flags & NL80211_RRF_PASSIVE_SCAN))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+         if (ch->flags & IEEE80211_CHAN_NO_IR)
+            ch->flags &= ~IEEE80211_CHAN_NO_IR;
+#else   	  	
          if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
             ch->flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif
    }
 }
 
@@ -1030,8 +1065,12 @@
        */
       if (!(ch->flags & IEEE80211_CHAN_DISABLED))
          ch->flags |= IEEE80211_CHAN_RADAR |
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+            IEEE80211_CHAN_NO_IR;
+#else
             IEEE80211_CHAN_NO_IBSS |
             IEEE80211_CHAN_PASSIVE_SCAN;
+#endif       
    }
 }
 
@@ -1063,17 +1102,29 @@
 
    if  (pHddCtx->cfg_ini->fRegChangeDefCountry) {
        regd = vos_custom_world_regdomain();
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+       wiphy->regulatory_flags |= REGULATORY_CUSTOM_REG;
+#else
        wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
+#endif
    }
    else if (is_world_regd(reg->reg_domain))
    {
        regd = vos_world_regdomain(reg);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+       wiphy->regulatory_flags |= REGULATORY_CUSTOM_REG;
+#else	   
        wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
+#endif
    }
    else
    {
        regd = vos_default_world_regdomain();
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+       wiphy->regulatory_flags |= REGULATORY_STRICT_REG;					
+#else            
        wiphy->flags |= WIPHY_FLAG_STRICT_REGULATORY;
+#endif	   
    }
    wiphy_apply_custom_regulatory(wiphy, regd);
    vos_reg_apply_radar_flags(wiphy);
@@ -3272,14 +3323,22 @@
             if (0 == err)
 #endif
             {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+                if  (wiphy->regulatory_flags & REGULATORY_CUSTOM_REG) {
+#else            
                 if  (wiphy->flags & WIPHY_FLAG_CUSTOM_REGULATORY) {
+#endif					
 
                     if (!(reg_rule->flags & NL80211_RRF_PASSIVE_SCAN))
                     {
                         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_INFO,
                                   "%s: Remove passive scan restriction for %u",
                                   __func__, wiphy->bands[i]->channels[j].center_freq);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                        wiphy->bands[i]->channels[j].flags &= ~IEEE80211_CHAN_NO_IR;
+#else   	  	
                         wiphy->bands[i]->channels[j].flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif   						
                     }
 
                     if (!(reg_rule->flags & NL80211_RRF_NO_IBSS))
@@ -3287,7 +3346,11 @@
                         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_INFO,
                                   "%s: Remove no ibss restriction for %u",
                                   __func__, wiphy->bands[i]->channels[j].center_freq);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                        wiphy->bands[i]->channels[j].flags &= ~IEEE80211_CHAN_NO_IR;
+#else   	  	
                         wiphy->bands[i]->channels[j].flags &= ~IEEE80211_CHAN_NO_IBSS;
+#endif 					
                     }
 
                     wiphy->bands[i]->channels[j].max_power =
@@ -3311,7 +3374,11 @@
 
             /* nv cannot distinguish between DFS and passive channels */
             else if (wiphy->bands[i]->channels[j].flags &
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                    (IEEE80211_CHAN_RADAR | IEEE80211_CHAN_NO_IR))
+#else   	  	
                     (IEEE80211_CHAN_RADAR | IEEE80211_CHAN_PASSIVE_SCAN))
+#endif   				
             {
                 pnvEFSTable->halnv.tables.regDomains[temp_reg_domain].channels[k].enabled =
                     NV_CHANNEL_DFS;
@@ -3584,7 +3651,11 @@
                   ((request->alpha2[0]== 'U'&& request->alpha2[1]=='S') &&
                                 pHddCtx->nEnableStrictRegulatoryForFCC))
              {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                 wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags |= IEEE80211_CHAN_NO_IR;
+#else   	  	
                  wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags |= IEEE80211_CHAN_PASSIVE_SCAN;
+#endif             
              }
           }
        }
@@ -3686,18 +3757,30 @@
         /* default country is world roaming */
 
         reg_domain = REGDOMAIN_WORLD;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+        wiphy->regulatory_flags |= REGULATORY_CUSTOM_REG;					
+#else            
         wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
+#endif		
     }
     else if (REGDOMAIN_WORLD ==
 	     pnvEFSTable->halnv.tables.defaultCountryTable.regDomain) {
 
         reg_domain = pnvEFSTable->halnv.tables.defaultCountryTable.regDomain;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+        wiphy->regulatory_flags |= REGULATORY_CUSTOM_REG;					
+#else            
         wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
+#endif		
     }
     else {
 
         reg_domain = pnvEFSTable->halnv.tables.defaultCountryTable.regDomain;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
+        wiphy->regulatory_flags |= REGULATORY_STRICT_REG;					
+#else            
         wiphy->flags |= WIPHY_FLAG_STRICT_REGULATORY;
+#endif		
     }
     m = 0;
     for (i = 0; i < IEEE80211_NUM_BANDS; i++)
@@ -3723,9 +3806,11 @@
 
             else if (pnvEFSTable->halnv.tables.regDomains[reg_domain].channels[k].enabled ==
                      NV_CHANNEL_DFS) {
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_NO_IR;
+#else   	  	
                 wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_PASSIVE_SCAN;
-
+#endif 
                 wiphy->bands[i]->channels[j].max_power =
                     (pnvEFSTable->halnv.tables.regDomains[reg_domain].channels[k].pwrLimit)*100;
             }
@@ -4146,13 +4231,21 @@
                  {
                      wiphy->bands[i]->channels[j].flags &= ~(IEEE80211_CHAN_DISABLED
                                                              |IEEE80211_CHAN_RADAR);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                     wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_NO_IR;
+#else   	  	
                      wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_PASSIVE_SCAN;
+#endif					 
                  }
                  else
                  {
                      wiphy->bands[i]->channels[j].flags &= ~(IEEE80211_CHAN_DISABLED
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+															|IEEE80211_CHAN_NO_IR
+#else   	  	
                                                              |IEEE80211_CHAN_PASSIVE_SCAN
-                                                             |IEEE80211_CHAN_NO_IBSS
+															|IEEE80211_CHAN_NO_IBSS															
+#endif						 	
                                                              |IEEE80211_CHAN_RADAR);
                  }
              }
@@ -4182,7 +4275,11 @@
                      ((domainIdCurrent == REGDOMAIN_FCC) &&
                                        pHddCtx->nEnableStrictRegulatoryForFCC))
                  {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                     wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags |= IEEE80211_CHAN_NO_IR;
+#else   	  	
                      wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags |= IEEE80211_CHAN_PASSIVE_SCAN;
+#endif	                 
                  }
                  else if ((wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].center_freq == 5180 ||
                            wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].center_freq == 5200 ||
@@ -4191,7 +4288,11 @@
                           ((domainIdCurrent != REGDOMAIN_FCC) ||
                                       !pHddCtx->nEnableStrictRegulatoryForFCC))
                  {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))                     
+                     wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags &= ~IEEE80211_CHAN_NO_IR;
+#else   	  	
                      wiphy->bands[IEEE80211_BAND_5GHZ]->channels[j].flags &= ~IEEE80211_CHAN_PASSIVE_SCAN;
+#endif	                 
                  }
              }
          }
@@ -4212,3 +4313,5 @@
 }
 
 #endif
+#undef LINUX_VERSION_CODE
+#include <linux/version.h>
\ No newline at end of file
