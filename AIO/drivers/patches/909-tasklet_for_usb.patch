/*
* Copyright (c) 2014 Linux Foundation
* All Rights Reserved.
*
* Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/

diff -Naur qcacld-new.old/CORE/SERVICES/HIF/USB/hif_usb.c qcacld-new/CORE/SERVICES/HIF/USB/hif_usb.c
--- qcacld-new.old/CORE/SERVICES/HIF/USB/hif_usb.c	2014-09-11 09:57:55.739470146 +0800
+++ qcacld-new/CORE/SERVICES/HIF/USB/hif_usb.c	2014-09-11 15:52:22.028923980 +0800
@@ -230,8 +230,11 @@
 
 	/* note: queue implements a lock */
 	skb_queue_tail(&pipe->io_comp_queue, buf);
+#ifdef HIF_USB_TASKLET
+        tasklet_schedule(&pipe->io_complete_tasklet);
+#else
 	schedule_work(&pipe->io_complete_work);
-
+#endif
 	AR_DEBUG_PRINTF(USB_HIF_DEBUG_BULK_OUT, ("-%s\n", __func__));
 }
 
@@ -267,8 +270,11 @@
 
 	while ((tmp_buf = skb_dequeue(&urb_context->comp_queue)))
 		skb_queue_tail(&pipe->io_comp_queue, tmp_buf);
+#ifdef HIF_USB_TASKLET
+        tasklet_schedule(&pipe->io_complete_tasklet);
+#else
 	schedule_work(&pipe->io_complete_work);
-
+#endif
 	AR_DEBUG_PRINTF(USB_HIF_DEBUG_BULK_OUT, ("-%s\n", __func__));
 }
 
@@ -609,8 +615,12 @@
 
 		for (i = 0; i < HIF_USB_PIPE_MAX; i++) {
 			pipe = &device->pipes[i];
+#ifdef HIF_USB_TASKLET
+                        tasklet_init(&pipe->io_complete_tasklet, usb_hif_io_comp_tasklet, (long unsigned int)pipe);
+#else
 			INIT_WORK(&pipe->io_complete_work,
 				  usb_hif_io_comp_work);
+#endif
 			skb_queue_head_init(&pipe->io_comp_queue);
 		}
 
diff -Naur qcacld-new.old/CORE/SERVICES/HIF/USB/hif_usb_internal.h qcacld-new/CORE/SERVICES/HIF/USB/hif_usb_internal.h
--- qcacld-new.old/CORE/SERVICES/HIF/USB/hif_usb_internal.h	2014-09-11 09:57:55.739470146 +0800
+++ qcacld-new/CORE/SERVICES/HIF/USB/hif_usb_internal.h	2014-09-11 15:52:22.028923980 +0800
@@ -105,7 +105,11 @@
 	A_UINT8 logical_pipe_num;
 	struct _HIF_DEVICE_USB *device;
 	A_UINT16 max_packet_size;
+#ifdef HIF_USB_TASKLET
+        struct tasklet_struct io_complete_tasklet;
+#else
 	struct work_struct io_complete_work;
+#endif
 	struct sk_buff_head io_comp_queue;
 	struct usb_endpoint_descriptor *ep_desc;
 } HIF_USB_PIPE;
@@ -157,7 +161,11 @@
 					     HIF_URB_CONTEXT *urb_context);
 extern void usb_hif_remove_pending_transfer(HIF_URB_CONTEXT *urb_context);
 extern HIF_URB_CONTEXT *usb_hif_alloc_urb_from_pipe(HIF_USB_PIPE *pipe);
+#ifdef HIF_USB_TASKLET
+extern void usb_hif_io_comp_tasklet(long unsigned int context);
+#else
 extern void usb_hif_io_comp_work(struct work_struct *work);
+#endif
 /* Support for USB Suspend / Resume */
 extern void usb_hif_suspend(struct usb_interface *interface);
 extern void usb_hif_resume(struct usb_interface *interface);
diff -Naur qcacld-new.old/CORE/SERVICES/HIF/USB/usbdrv.c qcacld-new/CORE/SERVICES/HIF/USB/usbdrv.c
--- qcacld-new.old/CORE/SERVICES/HIF/USB/usbdrv.c	2014-09-11 09:57:55.739470146 +0800
+++ qcacld-new/CORE/SERVICES/HIF/USB/usbdrv.c	2014-09-11 15:52:22.028923980 +0800
@@ -435,7 +435,9 @@
 		if (device->pipes[i].device != NULL) {
 			usb_hif_flush_pending_transfers(&device->pipes[i]);
 			pipe = &device->pipes[i];
+#ifndef HIF_USB_TASKLET
 			flush_work(&pipe->io_complete_work);
+#endif
 		}
 	}
 
@@ -525,8 +527,11 @@
 
 		/* note: queue implements a lock */
 		skb_queue_tail(&pipe->io_comp_queue, buf);
+#ifdef HIF_USB_TASKLET
+                tasklet_schedule(&pipe->io_complete_tasklet);
+#else
 		schedule_work(&pipe->io_complete_work);
-
+#endif
 	} while (FALSE);
 
 	usb_hif_cleanup_recv_urb(urb_context);
@@ -702,8 +707,11 @@
 
 		} while (netlen);
 
+#ifdef HIF_USB_TASKLET
+                tasklet_schedule(&pipe->io_complete_tasklet);
+#else
 		schedule_work(&pipe->io_complete_work);
-
+#endif
 	} while (FALSE);
 
 	if (urb_context->buf == NULL) {
@@ -978,9 +986,17 @@
                                 (x == FW_REG_PATTERN) || \
                                 ((x & FW_RAMDUMP_PATTERN_MASK) == FW_RAMDUMP_PATTERN))?1:0
 
+#ifdef HIF_USB_TASKLET
+void usb_hif_io_comp_tasklet(long unsigned int context)
+#else
 void usb_hif_io_comp_work(struct work_struct *work)
+#endif
 {
+#ifdef HIF_USB_TASKLET
+        HIF_USB_PIPE *pipe = (HIF_USB_PIPE *) context;
+#else
 	HIF_USB_PIPE *pipe = container_of(work, HIF_USB_PIPE, io_complete_work);
+#endif
 	adf_nbuf_t buf;
 	HIF_DEVICE_USB *device;
 	HTC_FRAME_HDR *HtcHdr;
diff -Naur qcacld-new.old/Kbuild qcacld-new/Kbuild
--- qcacld-new.old/Kbuild	2014-09-11 09:57:55.775470324 +0800
+++ qcacld-new/Kbuild	2014-09-11 15:54:36.661591588 +0800
@@ -1287,6 +1287,8 @@
 CDEFINES += -DLINUX_QCMBR
 endif
 
+CDEFINES += -DHIF_USB_TASKLET
+
 KBUILD_CPPFLAGS += $(CDEFINES)
 
 # Currently, for versions of gcc which support it, the kernel Makefile
